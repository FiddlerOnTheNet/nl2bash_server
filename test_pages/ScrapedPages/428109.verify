{"title":"Extract substring in Bash","commands":["echo \u0027someletters_12345_moreleters.ext\u0027 | cut -d\u0027_\u0027 -f 2 \u0026\u0026 INPUT\u003d\u0027someletters_12345_moreleters.ext\u0027\nSUBSTRING\u003d$(echo $INPUT| cut -d\u0027_\u0027 -f 2)\necho $SUBSTRING \u0026\u0026 ","b\u003d${a:12:5} \u0026\u0026 tmp\u003d${a#*_}   # remove prefix ending in \"_\"\nb\u003d${tmp%_*}   # remove suffix starting with \"_\" \u0026\u0026 ","number\u003d$(echo $filename | egrep -o \u0027[[:digit:]]{5}\u0027 | head -n1) \u0026\u0026 number\u003d${filename:offset:length} \u0026\u0026 number\u003d$(echo $filename | awk -F _ \u0027{ print $2 }\u0027) \u0026\u0026 number\u003d$(echo $filename | tr -cd \u0027[[:digit:]]\u0027) \u0026\u0026 ",null,"$ man bash [press return key]\n/substring  [press return key]\n[press \"n\" key]\n[press \"n\" key]\n[press \"n\" key]\n[press \"n\" key] \u0026\u0026 ${parameter:offset}\n       ${parameter:offset:length}\n              Substring Expansion.  Expands to  up  to  length  characters  of\n              parameter  starting  at  the  character specified by offset.  If\n              length is omitted, expands to the substring of parameter  start?\n              ing at the character specified by offset.  length and offset are\n              arithmetic expressions (see ARITHMETIC  EVALUATION  below).   If\n              offset  evaluates  to a number less than zero, the value is used\n              as an offset from the end of the value of parameter.  Arithmetic\n              expressions  starting  with  a - must be separated by whitespace\n              from the preceding : to be distinguished from  the  Use  Default\n              Values  expansion.   If  length  evaluates to a number less than\n              zero, and parameter is not @ and not an indexed  or  associative\n              array,  it is interpreted as an offset from the end of the value\n              of parameter rather than a number of characters, and the  expan?\n              sion is the characters between the two offsets.  If parameter is\n              @, the result is length positional parameters beginning at  off?\n              set.   If parameter is an indexed array name subscripted by @ or\n              *, the result is the length members of the array beginning  with\n              ${parameter[offset]}.   A  negative  offset is taken relative to\n              one greater than the maximum index of the specified array.  Sub?\n              string  expansion applied to an associative array produces unde?\n              fined results.  Note that a negative offset  must  be  separated\n              from  the  colon  by  at least one space to avoid being confused\n              with the :- expansion.  Substring indexing is zero-based  unless\n              the  positional  parameters are used, in which case the indexing\n              starts at 1 by default.  If offset  is  0,  and  the  positional\n              parameters are used, $0 is prefixed to the list. \u0026\u0026 "]}