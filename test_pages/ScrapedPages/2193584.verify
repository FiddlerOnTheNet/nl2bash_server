{"title":"Copy folder recursively, excluding some folders","commands":["rsync -av --exclude\u003d\u0027path1/to/exclude\u0027 --exclude\u003d\u0027path2/to/exclude\u0027 source destination \u0026\u0026 ","cd /source_directory\ntar cf - --exclude\u003ddir_to_exclude . | (cd /destination \u0026\u0026 tar xvf - ) \u0026\u0026 ","cd /source-dir\n       find . -name .snapshot -prune -o \\( \\! -name *~ -print0 \\)|\n       cpio -pmd0 /dest-dir\n\n       This command copies the contents of /source-dir to /dest-dir, but omits\n       files  and directories named .snapshot (and anything in them).  It also\n       omits files or directories whose name ends in ~,  but  not  their  con?\n       tents.  The construct -prune -o \\( ... -print0 \\) is quite common.  The\n       idea here is that the expression before -prune matches things which are\n       to  be  pruned.  However, the -prune action itself returns true, so the\n       following -o ensures that the right hand side  is  evaluated  only  for\n       those  directories  which didn\u0027t get pruned (the contents of the pruned\n       directories are not even visited, so their  contents  are  irrelevant).\n       The  expression on the right hand side of the -o is in parentheses only\n       for clarity.  It emphasises that the -print0 action  takes  place  only\n       for  things  that  didn\u0027t  have  -prune  applied  to them.  Because the\n       default `and\u0027 condition between tests binds more tightly than -o,  this\n       is  the  default anyway, but the parentheses help to show what is going\n       on. \u0026\u0026 ","find . -name * -print0 | grep -v \"exclude\" | xargs -0 -I {} cp -a {} destination/ \u0026\u0026 ","cd /source_directory\ntar cvf test.tar --exclude\u003ddir_to_exclude *\nmv test.tar /destination \ncd /destination  \ntar xvf test.tar \u0026\u0026 "]}