{"title":"What\u0027s a concise way to check that environment variables are set in a Unix shell script?","commands":[": ${STATE?\"Need to set STATE\"}\n: ${DEST:?\"Need to set DEST non-empty\"} \u0026\u0026 : \"${STATE?Need to set STATE}\"\n: \"${DEST:?Need to set DEST non-empty}\" \u0026\u0026 ${parameter:?word} \u0026\u0026 In script.sh line 13:\n: ${FOO:?\"The environment variable \u0027FOO\u0027 must be set and non-empty\"}\n  ^-- SC2086: Double quote to prevent globbing and word splitting. \u0026\u0026 : \"${STATE?Need to set STATE}\"\n: \"${DEST:?Need to set DEST non-empty}\" \u0026\u0026 $ mkdir junk\n$ cd junk\n$ \u003e abc\n$ \u003e def\n$ \u003e ghi\n$ \n$ x\u003d\"*\"\n$ printf \"%s\\n\" ${x:?You must set x}    # Careless; not recommended\nabc\ndef\nghi\n$ unset x\n$ printf \"%s\\n\" ${x:?You must set x}    # Careless; not recommended\nbash: x: You must set x\n$ printf \"%s\\n\" \"${x:?You must set x}\"  # Careful: should be used\nbash: x: You must set x\n$ x\u003d\"*\"\n$ printf \"%s\\n\" \"${x:?You must set x}\"  # Careful: should be used\n*\n$ printf \"%s\\n\" ${x:?\"You must set x\"}  # Not quite careful enough\nabc\ndef\nghi\n$ x\u003d\n$ printf \"%s\\n\" ${x:?\"You must set x\"}  # Not quite careful enough\nbash: x: You must set x\n$ unset x\n$ printf \"%s\\n\" ${x:?\"You must set x\"}  # Not quite careful enough\nbash: x: You must set x\n$ \u0026\u0026 ","[ -z \"$STATE\" ] \u0026\u0026 echo \"Need to set STATE\" \u0026\u0026 exit 1; \u0026\u0026 ","${MyVariable:\u003dSomeDefault} \u0026\u0026 ${MyVariable:-SomeDefault} \u0026\u0026 ",null,"${MyVariable:\u003dSomeDefault} \u0026\u0026 MyVariable\u003d${MyVariable:\u003dSomeDefault} \u0026\u0026 "]}