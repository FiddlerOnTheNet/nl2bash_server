{"title":"Comparing numbers in Bash","commands":["if (( a \u003e b )); then\n    ...\nfi \u0026\u0026 if [ \"$a\" -gt \"$b\" ]; then\n    ...\nfi \u0026\u0026 ","#!/bin/bash\n\na\u003d2462620\nb\u003d2462620\n\nif [ \"$a\" -eq \"$b\" ];then\n  echo \"They\u0027re equal\";\nfi \u0026\u0026 -eq # equal\n-ne # not equal\n-lt # less than\n-le # less than or equal\n-gt # greater than\n-ge # greater than or equal \u0026\u0026 ","echo $(( a \u003c b ? a : b )) \u0026\u0026 ","[[ N -gt M ]] \u0026\u0026 (( (N + 1) \u003e M )) \u0026\u0026 [[ \u0027N + 1\u0027 -gt M ]] \u0026\u0026 ","$ awk \u0027BEGIN {return_code\u003d(-1.2345 \u003d\u003d -1.2345) ? 0 : 1; exit} END {exit return_code}\u0027\n$ echo $?\n0\n$ awk \u0027BEGIN {return_code\u003d(-1.2345 \u003e\u003d -1.2345) ? 0 : 1; exit} END {exit return_code}\u0027\n$ echo $?\n0\n$ awk \u0027BEGIN {return_code\u003d(-1.2345 \u003c -1.2345) ? 0 : 1; exit} END {exit return_code}\u0027\n$ echo $?\n1\n$ awk \u0027BEGIN {return_code\u003d(-1.2345 \u003c 2) ? 0 : 1; exit} END {exit return_code}\u0027\n$ echo $?\n0\n$ awk \u0027BEGIN {return_code\u003d(-1.2345 \u003e 2) ? 0 : 1; exit} END {exit return_code}\u0027\n$ echo $? \u0026\u0026 compare_nums()\n{\n   # Function to compare two numbers (float or integers) by using awk.\n   # The function will not print anything, but it will return 0 (if the comparison is true) or 1\n   # (if the comparison is false) exit codes, so it can be used directly in shell one liners.\n   #############\n   ### Usage ###\n   ### Note that you have to enclose the comparison operator in quotes.\n   #############\n   # compare_nums 1 \"\u003e\" 2 # returns false\n   # compare_nums 1.23 \"\u003c\u003d\" 2 # returns true\n   # compare_nums -1.238 \"\u003c\u003d\" -2 # returns false\n   #############################################\n   num1\u003d$1\n   op\u003d$2\n   num2\u003d$3\n   E_BADARGS\u003d65\n\n   # Make sure that the provided numbers are actually numbers.\n   if ! [[ $num1 \u003d~ ^-?[0-9]+([.][0-9]+)?$ ]]; then \u003e\u00262 echo \"$num1 is not a number\"; return $E_BADARGS; fi\n   if ! [[ $num2 \u003d~ ^-?[0-9]+([.][0-9]+)?$ ]]; then \u003e\u00262 echo \"$num2 is not a number\"; return $E_BADARGS; fi\n\n   # If you want to print the exit code as well (instead of only returning it), uncomment\n   # the awk line below and comment the uncommented one which is two lines below.\n   #awk \u0027BEGIN {print return_code\u003d(\u0027$num1\u0027 \u0027$op\u0027 \u0027$num2\u0027) ? 0 : 1; exit} END {exit return_code}\u0027\n   awk \u0027BEGIN {return_code\u003d(\u0027$num1\u0027 \u0027$op\u0027 \u0027$num2\u0027) ? 0 : 1; exit} END {exit return_code}\u0027\n   return_code\u003d$?\n   return $return_code\n}\n\n$ compare_nums -1.2345 \"\u003e\u003d\" -1.2345 \u0026\u0026 echo true || echo false\ntrue\n$ compare_nums -1.2345 \"\u003e\u003d\" 23 \u0026\u0026 echo true || echo false\nfalse \u0026\u0026 "]}