{"title":"How to get arguments with flags in bash script","commands":["while test $# -gt 0; do\n        case \"$1\" in\n                -h|--help)\n                        echo \"$package - attempt to capture frames\"\n                        echo \" \"\n                        echo \"$package [options] application [arguments]\"\n                        echo \" \"\n                        echo \"options:\"\n                        echo \"-h, --help                show brief help\"\n                        echo \"-a, --action\u003dACTION       specify an action to use\"\n                        echo \"-o, --output-dir\u003dDIR      specify a directory to store output in\"\n                        exit 0\n                        ;;\n                -a)\n                        shift\n                        if test $# -gt 0; then\n                                export PROCESS\u003d$1\n                        else\n                                echo \"no process specified\"\n                                exit 1\n                        fi\n                        shift\n                        ;;\n                --action*)\n                        export PROCESS\u003d`echo $1 | sed -e \u0027s/^[^\u003d]*\u003d//g\u0027`\n                        shift\n                        ;;\n                -o)\n                        shift\n                        if test $# -gt 0; then\n                                export OUTPUT\u003d$1\n                        else\n                                echo \"no output dir specified\"\n                                exit 1\n                        fi\n                        shift\n                        ;;\n                --output-dir*)\n                        export OUTPUT\u003d`echo $1 | sed -e \u0027s/^[^\u003d]*\u003d//g\u0027`\n                        shift\n                        ;;\n                *)\n                        break\n                        ;;\n        esac\ndone \u0026\u0026 ","verbose\u003d\u0027false\u0027\naflag\u003d\u0027\u0027\nbflag\u003d\u0027\u0027\nfiles\u003d\u0027\u0027\n\nwhile getopts \u0027abf:v\u0027 flag; do\n  case \"${flag}\" in\n    a) aflag\u003d\u0027true\u0027 ;;\n    b) bflag\u003d\u0027true\u0027 ;;\n    f) files\u003d\"${OPTARG}\" ;;\n    v) verbose\u003d\u0027true\u0027 ;;\n    *) error \"Unexpected option ${flag}\" ;;\n  esac\ndone \u0026\u0026 ","function f () {\nTEMP\u003d`getopt --long -o \"u:h:\" \"$@\"`\neval set -- \"$TEMP\"\nwhile true ; do\n    case \"$1\" in\n        -u )\n            user\u003d$2\n            shift 2\n        ;;\n        -h )\n            host\u003d$2\n            shift 2\n        ;;\n        *)\n            break\n        ;;\n    esac \ndone;\n\necho \"user \u003d $user, host \u003d $host\"\n}\n\nf -u myself -h some_host \u0026\u0026 ","function DOSOMETHING {\n\n   while test $# -gt 0; do\n           case \"$1\" in\n                -first)\n                    shift\n                    first_argument\u003d$1\n                    shift\n                    ;;\n                -last)\n                    shift\n                    last_argument\u003d$1\n                    shift\n                    ;;\n                *)\n                   echo \"$1 is not a recognized flag!\"\n                   return 1;\n                   ;;\n          esac\n  done  \n\n  echo \"First argument : $first_argument\";\n  echo \"Last argument : $last_argument\";\n } \u0026\u0026 DOSOMETHING -last \"Adios\" -first \"Hola\" \u0026\u0026 First argument : Hola\n Last argument : Adios \u0026\u0026 #!/bin/bash\nwhile test $# -gt 0; do\n           case \"$1\" in\n                -first)\n                    shift\n                    first_argument\u003d$1\n                    shift\n                    ;;\n                -last)\n                    shift\n                    last_argument\u003d$1\n                    shift\n                    ;;\n                *)\n                   echo \"$1 is not a recognized flag!\"\n                   return 1;\n                   ;;\n          esac\n  done  \n\n  echo \"First argument : $first_argument\";\n  echo \"Last argument : $last_argument\"; \u0026\u0026 ","# declaring a couple of associative arrays\ndeclare -A arguments\u003d();  \ndeclare -A variables\u003d();\n\n# declaring an index integer\ndeclare -i index\u003d1;\n\n# any variables you want to use here\n# on the left left side is argument label or key (entered at the command line along with it\u0027s value) \n# on the right side is the variable name the value of these arguments should be mapped to.\n# (the examples above show how these are being passed into this script)\nvariables[\"-gu\"]\u003d\"git_user\";  \nvariables[\"--git-user\"]\u003d\"git_user\";  \nvariables[\"-gb\"]\u003d\"git_branch\";  \nvariables[\"--git-branch\"]\u003d\"git_branch\";  \nvariables[\"-dbr\"]\u003d\"db_fqdn\";  \nvariables[\"--db-redirect\"]\u003d\"db_fqdn\";  \nvariables[\"-e\"]\u003d\"environment\";  \nvariables[\"--environment\"]\u003d\"environment\";\n\n# $@ here represents all arguments passed in\nfor i in \"$@\"  \ndo  \n  arguments[$index]\u003d$i;\n  prev_index\u003d\"$(expr $index - 1)\";\n\n  # this if block does something akin to \"where $i contains \u003d\"\n  # \"%\u003d*\" here strips out everything from the \u003d to the end of the argument leaving only the label\n  if [[ $i \u003d\u003d *\"\u003d\"* ]]\n    then argument_label\u003d${i%\u003d*} \n    else argument_label\u003d${arguments[$prev_index]}\n  fi\n\n  # this if block only evaluates to true if the argument label exists in the variables array\n  if [[ -n ${variables[$argument_label]} ]]\n    then\n        # dynamically creating variables names using declare\n        # \"#$argument_label\u003d\" here strips out the label leaving only the value\n        if [[ $i \u003d\u003d *\"\u003d\"* ]]\n            then declare ${variables[$argument_label]}\u003d${i#$argument_label\u003d} \n            else declare ${variables[$argument_label]}\u003d${arguments[$index]}\n        fi\n  fi\n\n  index\u003dindex+1;\ndone;\n\n# then you could simply use the variables like so:\necho \"$git_user\"; \u0026\u0026 "]}